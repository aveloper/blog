// Code generated by sqlc. DO NOT EDIT.

package query

import (
	"database/sql"
	"fmt"
	"time"
)

type PostStatus string

const (
	PostStatusDraft   PostStatus = "draft"
	PostStatusPublish PostStatus = "publish"
	PostStatusArchive PostStatus = "archive"
)

func (e *PostStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostStatus(s)
	case string:
		*e = PostStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostStatus: %T", src)
	}
	return nil
}

type UserRole string

const (
	UserRoleOwner       UserRole = "owner"
	UserRoleAdmin       UserRole = "admin"
	UserRoleEditor      UserRole = "editor"
	UserRoleAuthor      UserRole = "author"
	UserRoleContributor UserRole = "contributor"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type Post struct {
	ID          int32          `db:"id"`
	Title       string         `db:"title"`
	Slug        string         `db:"slug"`
	Summary     string         `db:"summary"`
	FeatureImg  sql.NullString `db:"feature_img"`
	Content     string         `db:"content"`
	Status      string         `db:"status"`
	Likes       int64          `db:"likes"`
	Views       int64          `db:"views"`
	PublishedAt sql.NullTime   `db:"published_at"`
	CreatedAt   time.Time      `db:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at"`
}

type PostAuthor struct {
	UserID int32 `db:"user_id"`
	PostID int32 `db:"post_id"`
}

type PostTag struct {
	PostID int32 `db:"post_id"`
	TagID  int32 `db:"tag_id"`
}

type PostTopic struct {
	TopicID int32 `db:"topic_id"`
	PostID  int32 `db:"post_id"`
}

type Setting struct {
	ID        int32     `db:"id"`
	SiteName  string    `db:"site_name"`
	Favicon   string    `db:"favicon"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

type Subscriber struct {
	ID            int32     `db:"id"`
	Email         string    `db:"email"`
	EmailVerified bool      `db:"email_verified"`
	Unsubscribed  bool      `db:"unsubscribed"`
	CreatedAt     time.Time `db:"created_at"`
	UpdatedAt     time.Time `db:"updated_at"`
}

type Tag struct {
	ID        int32     `db:"id"`
	Name      string    `db:"name"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

type Topic struct {
	ID        int32         `db:"id"`
	Name      string        `db:"name"`
	ParentID  sql.NullInt32 `db:"parent_id"`
	CreatedAt time.Time     `db:"created_at"`
	UpdatedAt time.Time     `db:"updated_at"`
}

type User struct {
	ID        int32     `db:"id"`
	Name      string    `db:"name"`
	Email     string    `db:"email"`
	Password  string    `db:"password"`
	Role      UserRole  `db:"role"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}
